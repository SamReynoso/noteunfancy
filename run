#!/bin/sh

#  Defaults
CAT=/bin/cat
test -f /bin/bat && CAT=/bin/bat

EDITOR=vim
#DEFAULT_VIM_COMMANDS=""
test -f /bin/nvim && EDITOR=nvim
#test -f /bin/ed && EDITOR=/bin/ed
DEFAULT_VIM_COMMANDS="set spell"

# Directories and files
BASE_DIR=~/.note_unfancy
PRIVATE_DIR=$BASE_DIR/.private
ARCHIVE_DIR=$PRIVATE_DIR/archive
FILE=$BASE_DIR/note.no
TEMP=$PRIVATE_DIR/.temp.no
SWP="$PRIVATE_DIR/.swap.no"


#  Displayed when there are no notes
print_header () {
    echo "
    Note Unfancy

    You don't have any notes yet, or you would see them.
    Give noteunfancy notes.

------------------------------------------------------------

             Use the -h flag for more options
"
}
 

#  Help
print_help () {
    echo "
  note         Prints last 5 lines of Note File 
  note {args}  Args are added as notes EOF

       -h     Help
       -m     Multi line mode
       -r     Remove note  in the note file
       -e     Opens note file in editor
       -f     Print full note file
       -d     Delete note file
       -S     Swap the note file with the Swap File

       -a         Move current note file the archive directory
       -g {args}  Find matching string notes
       -A         Print all archives
"
    return 0
    }
 

 
run_note () {
    if [ $# -eq 0 ]; then
        lines=$(awk 'END {print NR}' $FILE)
        echo
        if [ "$lines" -eq 1 ]; then
            print_header
        else
            tail -5 $FILE | $CAT
        fi
    else
        echo "    $*" >> $FILE
    fi
    return 0
    }
 

note_opts () {
    makeFILE
    while getopts 'hmrefdagSA' flag; do
        case $flag in
            h) print_help ;;
            m) multi_line_mode;;
            r) remove ;;
            e) edit ;;
            f) print_full ;;
            d) delete ;;
            a) make_new_archive ;;
            g) grep_notes $@ ;;
            S) doSWP ;;
            A) cat_archive ;;
            *) return 1
        esac
        return $?
    done
    run_note "$@"
    return $?
}


# Multi line mode
multi_line_mode() {
    echo "
    Notes
Multi-line Mode:
Enter '.' on a new line to exit."

    printf "|    "
    read -r line
    if [ "$line" != "." ]; then
        echo "--------" >> $FILE
        while [ "$line" != "." ]; do
            echo "|   $line" >> $FILE
            printf "|    "
            read -r line
        done
        echo "--------" >> $FILE
    fi
    return 0
    }
 
#  Remove an item from notes
remove () {
    line_num=$(awk 'END {print NR}' $FILE)
    if [ "$line_num" = "1" ]; then echo "empty"; exit 0; fi
    touch $TEMP
    line=$(awk 'END {print}' $FILE)
    if [ "$line" = "--------" ]; then
        line=''
        while [ "$line" != "--------" ]; do
            line_num=$((line_num-1))
            line=$(awk -v l="$line_num" 'NR==l {print}' $FILE)
            if [ "$line_num" = "1" ]; then echo "multi line rm err"; exit 1; fi
        done
        awk -v l="$line_num" 'NR >= l {print}' $FILE | $CAT
    else
        echo "$line"
    fi
    printf "  Do you want to remove this note? (y/N) "
    read -r  ans
    if [ "$ans" = "y" ] || [ "$ans" = "Y" ] || [ "$ans" = "yes" ]; then
        awk -v l="$line_num" 'NR < l {print}' $FILE > $TEMP
        cat $TEMP > $FILE
    fi
    return 0
    }
 
#  Open the note file in an editor
edit () {
    if [ "$EDITOR" = "nvim" ] || [ "$EDITOR" = "vim" ]; then 
        if test -z "$DEFAULT_VIM_COMMANDS"; then
            $EDITOR  $FILE
        else
            $EDITOR -c "$DEFAULT_VIM_COMMANDS" $FILE
        fi
    else
        $EDITOR  $FILE
    fi
    return 0
    }
 
 
#  Save the notes
 
# Swap
doSWP () {
    if test -f $SWP; then
        echo swap file found
    else
        touch $SWP
        echo creating empty swap file
        date > $SWP
    fi
    cat $FILE > $TEMP
    cat $SWP > $FILE
    cat $TEMP > $SWP
    echo swapped
    return 0
    }
 
 
# Full
print_full () {
    $CAT $FILE
    return 0
}
 
 
# Delete
delete () {
    $CAT $FILE
    echo "  $(awk 'END {print NR}' $FILE) lines total"
    printf "    Do you want to delete this Note File (y/N) "
    read -r ans
    if [ "$ans" = "y" ] || [ "$ans" = "Y" ] || [ "$ans" = "yes" ]; then
        date > $FILE
    fi
    return 0
}
 
 
# Archive
make_new_archive () {
    if [ "$(awk 'END {print NR}' $FILE)" = "1" ]; then echo empty; exit 1; fi
    printf "    Archive your Note File? (y/N) "
    read -r ans
    if [ "$ans" = "y" ] || [ "$ans" = "Y" ] || [ "$ans" = "yes" ]; then
        path="$SVD/$(date '+%y%m%d_%H-%M-%S').no"
        touch "$path"
        date > "$path"
        echo Archive >> "$path"
        cat $FILE >> "$path"
        date > $FILE
        echo Archival complete
    fi
    return 0
    }
 

# Show archived
cat_archive () {
    $CAT $ARCHIVE_DIR/*
    return 0
    }
 
 
# Grep
grep_notes () {
    shift
    args=$*
    grep -irn --color "$args" $ARCHIVE_DIR
    test -f $SWP && printf "%b" "\033[32m$SWP\033[00m\n"
    grep -ins --color "$args" $SWP 
    printf "%b" "\033[32m$FILE\033[00m\n"
    grep -in --color "$args" $FILE 
    return 0
    }
 
 
makeFILE () {
    touch $FILE
    lines=$(awk 'END {print NR}' $FILE)
    if [ "$lines" -eq 0 ]; then
        date > $FILE
    fi
}


note_fs () {
    echo '        Creating directories'
    if test -d $BASE_DIR; then
        printf "%b"  "\033[32m$BASE_DIR    found\033[00m\n"
    else
        printf "%b"  "\033[32m    $BASE_DIR    created\033[00m\n"
        mkdir $BASE_DIR
    fi
    if test -d $PRIVATE_DIR; then
        printf "%b"  "\033[32m$PRIVATE_DIR    found\033[00m\n"
    else
        printf "%b"  "\033[32m    $PRIVATE_DIR    created\033[00m\n"
        mkdir $PRIVATE_DIR
    fi
    if test -d $ARCHIVE_DIR; then
        printf "%b"  "\033[32m$ARCHIVE_DIR    found\033[00m\n"
    else
        printf "%b"  "\033[32m    $ARCHIVE_DIR    created\033[00m\n"
        mkdir $ARCHIVE_DIR
    fi
    ret="$?"
    echo ------------------------------------------------------------
    return $ret
}

 
note_unfancy () {
    if test -d $BASE_DIR && test -d $PRIVATE_DIR && test -d $ARCHIVE_DIR; then
        note_opts "$@"
    else
        note_fs
        note_opts "$@"
    fi
    return $?
}

note_unfancy "$@"
